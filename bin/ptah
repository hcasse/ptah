#!/usr/bin/python3

import argparse
import re
import subprocess
import yaml

from ptah import io
from ptah import format
from ptah import util
from ptah import latex
from ptah import props
from ptah import *
import ptah.pages


# formats
# https://en.wikipedia.org/wiki/ISO_216
FORMATS = {
	"a3": (297, 420),
	"a4": (210, 297),
	"a5": (148, 210),
	"folio": (305, 483),
	"quarto": (214, 305),
	"imperial-octavo": (210, 292),
	"super-octavo": (178, 279),
	"royal-octavo": (159, 254),
	"medium-octavo": (165, 235),
	"octavo": (153, 229),
	"crown-octavo": (137, 203),
	"duodecimo": (127, 187),
	"sextodecimo": (102, 171),
	"octodecimo": (102, 165)
}


class PagesProp(props.Property):

	def __init__(self):
		props.Property.__init__(self, "pages", "list of pages", req = True)

	def parse(self, pages, album):
		if not hasattr(pages, "__iter__"):
			raise CheckError("pages should a be a list of pages!")
		for desc in pages:

			# get the page type
			try:
				type = desc["type"]
			except KeyError as e:
				type = "center"

			# make the page
			try:
				page = PAGE_MAP[type]()
			except KeyError:
				raise CheckError("page type %s is unknown!" % type)

			# initialize the page
			album.add_page(page)
			util.parse_dict(desc, page, page.get_props())


class FormatProp(props.Property):

	def __init__(self):
		props.Property.__init__(self, "format", "page format", req = True)

	def parse(self, fmt, album):
		try:
			props.Property.parse(self, format.FORMATS[fmt.upper()], album)
		except KeyError:
			raise util.CheckError(self, "format %s is unknown" % fmt)
				

ALBUM_PROPS = props.make([
	FormatProp(),
	PagesProp()
])

def read_album(album, mon):
	try:
		with open(album.path) as file:
			desc = yaml.safe_load(file)
			util.parse_dict(desc, album, ALBUM_PROPS)
		return True
	except yaml.YAMLError as e:
		raise CheckError(str(e))


# entry point
def main(mon = io.DEF):

	# parse arguments
	parser = argparse.ArgumentParser(
		prog = "ptah",
		description = "Photo album generator"
	)
	parser.add_argument('albums', nargs="*", help="Album to generate.")
	parser.add_argument("--doc", action="store_true",
		help="Generate the documentation.")
	
	args = parser.parse_args()
	albums = args.albums
	if albums == None:
		albums = "album.ptah"

	# generate the documentation
	if args.doc:
		latex.gen_doc(ALBUM_PROPS)
		
	# process the albums
	else:
		for path in args.albums:
			try:
				album = Album(path)
				read_album(album, mon)
				latex.Drawer(album)				
			except util.CheckError as e:
				mon.print_error(str(e))

main()
